import static org.gradle.api.JavaVersion.VERSION_1_8
import com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'signing'
apply plugin: 'maven-publish'

ext {
	projectName = 'micro-api-core'
}

sourceCompatibility = VERSION_1_8
targetCompatibility = VERSION_1_8

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

buildscript {
    	repositories {
		maven {
                	url "http://jcenter.bintray.com/"
		}
		dependencies {
			classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.2'
		}
	}
}

repositories { 
	maven {
        	url "http://repo.maven.apache.org/maven2/"
	}
	maven {
        url "http://jcenter.bintray.com/"
	}
}


dependencies {
	compile 'javax.ws.rs:javax.ws.rs-api:2.0'

	compile 'org.eclipse.jetty:jetty-server:9.4.2.v20170220'
	compile 'org.eclipse.jetty:jetty-servlet:9.4.2.v20170220'
	compile 'org.eclipse.jetty:jetty-util:9.4.2.v20170220'
		
	compile 'org.eclipse.jetty.websocket:javax-websocket-server-impl:9.4.2.v20170220'
	compile 'org.eclipse.jetty.websocket:websocket-server:9.4.2.v20170220'
		
	compile 'org.glassfish.jersey.core:jersey-server:2.25'
    compile 'org.glassfish.jersey.containers:jersey-container-servlet-core:2.25'
	compile 'org.glassfish.jersey.containers:jersey-container-jetty-http:2.25'
    	
    	compile 'org.glassfish.jersey.media:jersey-media-json-jackson:2.25'
	compile 'org.glassfish.jersey.media:jersey-media-moxy:2.25'
    compile 'org.glassfish.jersey.ext:jersey-spring3:2.25'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.8.4'
        
	compile 'org.springframework:spring-core:4.3.4.RELEASE'
    compile 'org.springframework:spring-context:4.3.4.RELEASE'
            
    compile 'org.springframework.integration:spring-integration-core:4.3.4.RELEASE'
    compile 'org.springframework.integration:spring-integration-jdbc:4.3.4.RELEASE'
    	compile 'org.springframework.integration:spring-integration-jms:4.3.4.RELEASE'
    	compile 'org.springframework.integration:spring-integration-ws:4.3.4.RELEASE'

    compile 'io.swagger:swagger-core:1.5.13'
    compile 'io.swagger:swagger-annotations:1.5.13'
    compile('io.swagger:swagger-jaxrs:1.5.13')
    {
        	exclude group: 'javax.ws.rs', module: 'jsr311-api'
    }
        
	compile 'org.apache.commons:commons-lang3:3.4'
	compile 'org.apache.httpcomponents:httpclient:4.5.3'
	compile 'commons-io:commons-io:2.5'
	compile 'commons-codec:commons-codec:1.10'
	
	compile 'org.hibernate:hibernate-validator:4.2.0.Final'
	compile 'joda-time:joda-time:2.9.9'
		
	compile group: 'log4j', name: 'log4j', version: '1.2.17'
	
    testCompile 'junit:junit:4.12'
	testCompile 'org.springframework:spring-test:4.3.4.RELEASE'
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile 'org.hamcrest:hamcrest-all:1.1'
    testCompile 'org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-jdk-http:2.25.1'
	testCompile 'org.glassfish.tyrus.bundles:tyrus-standalone-client:1.13.1'
}


shadowJar {
	baseName = projectName
	classifier = ''

	mergeServiceFiles()

	manifest {
	}

	transform(AppendingTransformer.class) {
		resource = 'META-INF/spring.handlers'
	}
			      
	transform(AppendingTransformer.class) {
  		resource = 'META-INF/spring.schemas'
 	}
}

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compile
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
	archives shadowJar
    archives sourcesJar
    archives javadocJar
}

signing {
    sign configurations.archives
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

	        name projectName
	        description 'Java framework for rapid development of enterprise class RESTful web services using best in class java libraries'
	        url 'https://github.com/itzmedinesh/micro-api-core.git'
	        inceptionYear '2017'
	            
	        scm {
	            url 'https://github.com/itzmedinesh/micro-api-core'
	            connection 'scm:git:git://github.com/itzmedinesh/micro-api-core.git'
	            developerConnection 'scm:git:git@github.com:itzmedinesh/micro-api-core.git'
	        }            
	            
	        licenses {
	            license {
	                name 'The Apache Software License, Version 2.0'
	                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
	                distribution 'repo'
	            }
	        }
	        developers {
	            developer {
	             	id 'itzmedinesh'
	                 name 'Dinesh Subramanian'
	                 email 'itzmedinesh@gmail.com'
	            }
	        }

        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId 'com.github.itzmedinesh'
            artifactId projectName
            version projectVersion

            from components.java

            // create the sign pom artifact
            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            artifact(sourcesJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }

            // create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }
        }
    }
    repositories {
        maven {
			credentials {
				username = project.ext['oss.sonatype.username']
				password = project.ext['oss.sonatype.password']
			}
			
			if(projectVersion.endsWith('-SNAPSHOT')) {
				url "https://oss.sonatype.org/content/repositories/snapshots"
			} else {
				url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
			}
        }
    }
}
